<doc>
    <title>Sea - Dotfiles</title>
    <url>index.html</url>
    <theme>../../../temas/everforest.css</theme>
    <version>Keep it simple, stupid.</version>
    <lang>en-us</lang>
    <rslt>Search Results</rslt>
    <home>Home</home>
    <info>Important</info>
    <hint>Hint</hint>
    <note>Note</note>
    <also>See Also</also>
    <todo>Todo</todo>
    <args>Arguments</args>
    <rval>Returned Value</rval>
    <warn>Warning</warn>
    <copy>2024 Sea (https://github.com/0x736561)</copy>
    <prev>Previous</prev>
    <next>Next</next>
</doc>

<hello>
  <h1>Welcome!</h1>
  <p>Here I will document every part that makes up the setup and also how you can modify every part of it.</p>
  <p>Despite being a simple setup, I think it's worth explaining how I did some things.</p>
  <note>
    <p>This setup has 4 different color palettes (Gruvbox, Dracula, Nord and Everforest) that can be chosen at any time with the shortcut key <tt>Super+t</tt>.</p>
  </note>
</hello>

<cap>sway</cap>
  <h1>Variables</h1>
    <p>This configuration has some variables that are used in several different parts,
     Feel free to change your values.</p>
    <pre>
Variables     Values
$mod          Mod4 (Super)
$term         foot
$web          qutebrowser
$file         manager
$nag          nag
$left         h
$down         j
$up           k
$right        l
    </pre>
  <h1>Touchpad</h1>
    <h2>Input</h2>
      <p>By default, my configuration disables the central button emulation and
       Natural Scroll, and enables Tap-to-Click.</p>
      <p>If you for some reason you need to change any of these behaviors,
       Just edit the following lines in <tt>~/.config/sway/config</tt>:</p>
      <code>
### Touchpad
    
input "1267:12734:MSFT0001:01_04F3:31BE_Touchpad" {
    dwt enabled
    tap <hl>enabled</hl>
    natural_scroll <hl>disabled</hl>
    middle_emulation <hl>disabled</hl>
}
      </code>
    <h2>Gestures</h2>
      <p>I took the freedom to configure some gestures for window handling
       and navigation between work areas. They all use 3 fingers to be performed.</p>
      <p>The gestures are as follows:</p>
      <ul>
        <li>Slide to the left = Workspace on the left </li>
        <li>Slide to the right = Workspace on the right </li>
        <li>Pinch inward + slide up = Move window up</li>
        <li>Pinch inward + slide down = Move window down</li>
        <li>Pinch inward + slide to the left = Move window to the left</li>
        <li>Pinch inward + slide to the right = Move window to the right</li>
      </ul>
      <p>To change any of these gestures, simply change the following lines in <tt>~/.config/sway/config:</tt></p>
      <code>
### Gestos

    bindgesture swipe:left workspace prev
    bindgesture swipe:right workspace next
    bindgesture pinch:inward+up move up
    bindgesture pinch:inward+down move down
    bindgesture pinch:inward+left move left
    bindgesture pinch:inward+right move right
      </code>
  <h1>Keyboard</h1>
    <h2>Layout</h2>
      <p>The default keyboard layout is BR-ABNT2, if you need to modify this layout, just edit this line:</p>
      <code>
### Teclado
    input 1:1:AT_Translated_Set_2_keyboard xkb_layout <hl>"br"</hl>
      </code>
    <h2>Keybinds</h2>
      <h3>Window manipulation</h3>
        <pre>
$ mod+q        = close window
Alt+tab        = change focus between floating window and tiling window
$ mod+tab      = change between floating mode and tiling
$ mod+period   = open window below the current
$ mod+comma    = open window to the right of the current
$ mod+f        = full screen
$ mod+z        = layout tiling
$ mod+x        = tab layout
$ mod+-        = show scratchpad
$ mod+alt+-    = move window to scratchpad
$ mod+h        = focus on the window on the left
$ mod+j        = focus on the window below
$ mod+k        = focus on the window above
$ mod+l        = focus on the window on the right
$ mod+alt+h    = move window to the left
$ mod+alt+j    = move window down
$ mod+alt+k    = move window up
$ mod+alt+l    = move window to the right
$ mod+ctrl+h   = resize window to the left
$ mod+ctrl+j   = resize window down
$ mod+ctrl+k   = resize window up
$ mod+ctrl+l   = resize window to the right
        </pre>
      <h3>Workspaces</h3>
        <pre>
$mod+[1-0]     = Goto the corresponding workspace
$mod+alt+[1-0] = Move current window to corresponding workspace
        </pre>
      <h3>Menus</h3>
        <pre>
$mod+p         = Binaries
$mod+d         = Desktop entries
$mod+e         = File browser
$mod+s         = Password browser
$mod+y         = Wifi menu
$mod+g         = Todo list
$mod+t         = Theme selector
$mod+c         = Music library (mpd)
$mod+semicolon = Emoji selector
$mod+delete    = Power menu
ctrl+alt+q     = Exit menu
        </pre>
      <h3>Screesharing</h3>
        <pre>
print          = Screenshot of the entire screen
shift+print    = Screenshot of a selection
ctrl+print     = Screenrecording
        </pre>
      <h3>Programs</h3>
        <pre>
$mod+enter     = Open terminal
$mod+w         = Open web browser
$mod+a         = Open pavucontrol
$mod+v         = Open cava
$mod+n         = Open newsboat
$mod+m         = Open neomutt
        </pre>

<cap>scripts</cap>
  <h1>manager</h1>
    <p>A simple file manager.</p>
    <note><p>Created by <a https://gitlab.com/Oglo12>Oglo12</a></p></note>
    <code>
open_fs () {
	item=$(ls -ap | rofi -dmenu -i -p "File Browser:")

	if [[ -d $item ]];
	then
		cd "$item"
		open_fs
	else	
		xdg-open $item
	fi
}

open_fs
    </code>
  <h1>pass_menu</h1>
    <note>
      <p>This script was modified by me to use Rofi instead of dmenu.</p>
      <p><a https://tools.suckless.org/dmenu/scripts/passmenu2>Original source-code</a></p>
    </note>
    <p>A password browser that uses passwordstore.</p>
    <code>
#!/usr/bin/env bash

shopt -s nullglob globstar

typeit=0
if [[ $1 == "--type" ]]; then
	typeit=1
	shift
fi


STARTDIR=${PASSWORD_STORE_DIR-~/.password-store}
BASEDIR=$STARTDIR
DONE=0
LEVEL=0
PREVSELECTION=""
SELECTION=""

while [ "$DONE" -eq 0 ] ; do 
  password_files=( "$STARTDIR"/* )
  password_files=( "${password_files[@]#"$STARTDIR"/}" )
  password_files=( "${password_files[@]%.gpg}" )
  
  if [ "$LEVEL" -ne 0 ] ; then
    password_files=(".." "${password_files[@]}") 
  fi
  entry=$(printf '%s\n' "${password_files[@]}" | rofi -dmenu "$@" -i -p "Escolha a senha")
  
  echo "entry: $entry"
  if [ -z "$entry" ] ; then
    DONE=1
    exit
  fi
  
  if [ "$entry" != ".." ] ; then
    PREVSELECTION=$SELECTION
    SELECTION="$SELECTION/$entry"
  
    # check if another dir
    if [ -d "$STARTDIR/$entry" ] ; then
      STARTDIR="$STARTDIR/$entry"
      LEVEL=$((LEVEL+1))
    else
      # not a directory so it must be a real password entry
  
      if [[ $typeit -eq 0 ]]; then
        pass show -c "$SELECTION" 2>/dev/null
      else
        xdotool - <<<"type --clearmodifiers -- $(pass show "$SELECTION" | head -n 1)"
      fi
      DONE=1
    fi
  
  else
    LEVEL=$((LEVEL-1))
    SELECTION=$PREVSELECTION
    STARTDIR="$BASEDIR/$SELECTION"
  fi
done
    </code>
  <h1>wifi_menu</h1>
    <p>A NetworkManager wrapper made by <a https://github.com/ericmurphyxyz/rofi-wifi-menu>Eric Murphy</a></p>
    <code>
#!/usr/bin/env bash

notify-send "Getting list of available Wi-Fi networks..."
# Get a list of available wifi connections and morph it into a nice-looking list
wifi_list=$(nmcli --fields "SECURITY,SSID" device wifi list | sed 1d | sed 's/  */ /g' | sed -E "s/WPA*.?\S/ /g" | sed "s/^--/ /g" | sed "s/  //g" | sed "/--/d")

connected=$(nmcli -fields WIFI g)
if [[ "$connected" =~ "enabled" ]]; then
	toggle="󰖪  Disable Wi-Fi"
elif [[ "$connected" =~ "disabled" ]]; then
	toggle="󰖩  Enable Wi-Fi"
fi

# Use rofi to select wifi network
chosen_network=$(echo -e "$toggle\n$wifi_list" | uniq -u | rofi -dmenu -i -selected-row 1 -p "Wi-Fi SSID: " )
# Get name of connection
read -r chosen_id <<< "${chosen_network:3}"

if [ "$chosen_network" = "" ]; then
	exit
elif [ "$chosen_network" = "󰖩  Enable Wi-Fi" ]; then
	nmcli radio wifi on
elif [ "$chosen_network" = "󰖪  Disable Wi-Fi" ]; then
	nmcli radio wifi off
else
	# Message to show when connection is activated successfully
  	success_message="You are now connected to the Wi-Fi network \"$chosen_id\"."
	# Get saved connections
	saved_connections=$(nmcli -g NAME connection)
	if [[ $(echo "$saved_connections" | grep -w "$chosen_id") = "$chosen_id" ]]; then
		nmcli connection up id "$chosen_id" | grep "successfully" && notify-send "Connection Established" "$success_message"
	else
		if [[ "$chosen_network" =~ "" ]]; then
			wifi_password=$(rofi -dmenu -password -p "Password: " )
		fi
		nmcli device wifi connect "$chosen_id" password "$wifi_password" | grep "successfully" && notify-send "Connection Established" "$success_message"
    fi
fi
    </code>
  <h1>power_menu</h1>
    <p>A simple power menu made by me.</p>
    <code>
  #!/bin/env bash

sair(){
	if [ $(nag) ]; then 
		swaymsg exit 
	fi
}

suspender(){
	if [ $(nag) ]; then
		systemctl suspend
	fi
}

reiniciar(){
	if [ $(nag) ]; then
		systemctl reboot
	fi
}

desligar(){
	if [ $(nag) ]; then
		systemctl poweroff
	fi
}
ESCOLHA="$(printf "Sair\nSuspender\nReiniciar\nDesligar" | rofi -dmenu -i -p "Escolha uma opção:")"

case "$ESCOLHA" in
	Sair) sair;;
	Suspender) suspender;;
  Reiniciar) reiniciar;;
  Desligar) desligar;;
	*) exit;;
esac

    </code>
  <h1>todo</h1>
    <note>
      <p>This script was modified by me to use Rofi instead of dmenu.</p>
      <p><a https://tools.suckless.org/dmenu/scripts/todo>Original source-code</a></p>
    </note>
    <p>A simple todo-list script.</p>
    <code>
#!/bin/sh
#
# Write/remove a task to do later.
#
# Select an existing entry to remove it from the file, or type a new entry to
# add it.
#

file="$HOME/.local/share/todo"
touch "$file"
height=$(wc -l "$file" | awk '{print $1}')
prompt="Add/delete a task: "

cmd=$(rofi -dmenu -i -l "$height" -p "$prompt" "$@" < "$file")
while [ -n "$cmd" ]; do
 	if grep -q "^$cmd\$" "$file"; then
		grep -v "^$cmd\$" "$file" > "$file.$$"
		mv "$file.$$" "$file"
        height=$(( height - 1 ))
 	else
		echo "$cmd" >> "$file"
		height=$(( height + 1 ))
 	fi

	cmd=$(rofi -dmenu -i -l "$height" -p "$prompt" "$@" < "$file")
done

exit 0
    </code>
  <h1>nag</h1>
    <p>A script that asks if you really want to something.</p>
    <p>It's meant to be used with other scripts, like for example, the power_menu script.</p>
    <code>
  #!/bin/env bash

CONFIRMACAO="$(printf "Sim\nNão" | rofi -dmenu -i -p "Você tem certeza?")"
case "$CONFIRMACAO" in
	Sim) echo 0;;
	*) exit;;
esac
    </code>
  <h1>tema</h1>
    <p>A theme switcher script made by me.</p>
    <p>Is on it's early stages, but perfectly functional.</p>
    <p>Any improvements are welcome.</p>
    <code>
#!/bin/env bash

gruvbox() {
	cat .config/sway/config | sed "s/temas\/\S*/temas\/gruvbox/g" > ~/.config/sway/.tmp
	cat .config/rofi/config.rasi | sed "s/themes\/\S*/themes\/gruvbox\"/g" > ~/.config/rofi/.tmp
	cat .config/helix/config.toml | sed "s/theme\s*=\s\"\S*/theme = \"gruvbox\"/g" > ~/.config/helix/.tmp

	cp ~/.config/sway/.tmp ~/.config/sway/config
	cp ~/.config/rofi/.tmp ~/.config/rofi/config.rasi
	cp ~/.config/helix/.tmp ~/.config/helix/config.toml
	cp ~/.config/foot/gruvbox.ini ~/.config/foot/foot.ini
	cp ~/.config/mako/gruvbox ~/.config/mako/config
	cp ~/.config/sway/wallpapers/gruvbox.png ~/.config/sway/wp

	rm ~/.config/sway/.tmp
	rm ~/.config/rofi/.tmp
	rm ~/.config/helix/.tmp

	pkill mako
	mako &

	swaymsg reload
}

dracula() {
	cat .config/sway/config | sed "s/temas\/\S*/temas\/dracula/g" > ~/.config/sway/.tmp
	cat .config/rofi/config.rasi | sed "s/themes\/\S*/themes\/dracula\"/g" > ~/.config/rofi/.tmp
	cat .config/helix/config.toml | sed "s/theme\s*=\s\"\S*/theme = \"dracula\"/g" > ~/.config/helix/.tmp
	
	cp ~/.config/sway/.tmp ~/.config/sway/config
	cp ~/.config/rofi/.tmp ~/.config/rofi/config.rasi
	cp ~/.config/helix/.tmp ~/.config/helix/config.toml
	cp ~/.config/foot/dracula.ini ~/.config/foot/foot.ini
	cp ~/.config/mako/dracula ~/.config/mako/config
	cp ~/.config/sway/wallpapers/dracula.png ~/.config/sway/wp
	
	rm ~/.config/sway/.tmp
	rm ~/.config/rofi/.tmp
	rm ~/.config/helix/.tmp

	pkill mako
	mako &

	swaymsg reload
}

nord() {
	cat .config/sway/config | sed "s/temas\/\S*/temas\/nord/g" > ~/.config/sway/.tmp
	cat .config/rofi/config.rasi | sed "s/themes\/\S*/themes\/nord\"/g" > ~/.config/rofi/.tmp
	cat .config/helix/config.toml | sed "s/theme\s*=\s\"\S*/theme = \"nord\"/g" > ~/.config/helix/.tmp

	cp ~/.config/sway/.tmp ~/.config/sway/config
	cp ~/.config/rofi/.tmp ~/.config/rofi/config.rasi
	cp ~/.config/helix/.tmp ~/.config/helix/config.toml
	cp ~/.config/foot/nord.ini ~/.config/foot/foot.ini
	cp ~/.config/mako/nord ~/.config/mako/config
	cp ~/.config/sway/wallpapers/nord.png ~/.config/sway/wp
	
	rm ~/.config/sway/.tmp
	rm ~/.config/rofi/.tmp
	rm ~/.config/helix/.tmp

	pkill mako
	mako &

	swaymsg reload
}

everforest() {
	cat .config/sway/config | sed "s/temas\/\S*/temas\/everforest/g" > ~/.config/sway/.tmp
	cat .config/rofi/config.rasi | sed "s/themes\/\S*/themes\/everforest\"/g" > ~/.config/rofi/.tmp
	cat .config/helix/config.toml | sed "s/theme\s*=\s\"\S*/theme = \"everforest_dark\"/g" > ~/.config/helix/.tmp

	cp ~/.config/sway/.tmp ~/.config/sway/config
	cp ~/.config/rofi/.tmp ~/.config/rofi/config.rasi
	cp ~/.config/helix/.tmp ~/.config/helix/config.toml
	cp ~/.config/foot/everforest.ini ~/.config/foot/foot.ini
	cp ~/.config/mako/everforest ~/.config/mako/config
	cp ~/.config/sway/wallpapers/everforest.png ~/.config/sway/wp

	rm ~/.config/sway/.tmp
	rm ~/.config/rofi/.tmp
	rm ~/.config/helix/.tmp

	pkill mako
	mako &

	swaymsg reload
}

ESCOLHA=$(printf "Gruvbox\nEverforest\nDracula\nNord" | rofi -dmenu -i -p "Escolha o tema:")

case "$ESCOLHA" in
	Gruvbox) gruvbox;;
	Everforest) everforest;;
	Dracula) dracula;;
	Nord) nord;;
	*) exit;;
esac
    </code>
